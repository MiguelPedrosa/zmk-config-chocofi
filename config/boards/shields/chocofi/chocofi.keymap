/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>


// tapping term definition
#define TAP_TERM_MS 200
#define QUICK_TAP_MS 125

#define BASE 0
#define SYM 1
#define NUM 2
#define NAV 3

#define LEFT_KEYS 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 // left-hand keys
#define RIGHT_KEYS 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 // right-hand keys
#define THUMBS 30 31 32 33 34 35 // thumb keys

/ {
    behaviors {
        // HOME ROW MODS

        hml: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAP_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            //#global-quick-tap = <150>;
            bindings =
                <&kp>,
                <&kp>;

            hold-trigger-key-positions = <RIGHT_KEYS THUMBS>;
            hold-trigger-on-release;
        };
        hmr: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAP_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            //#global-quick-tap = <150>;
            bindings =
                <&kp>,
                <&kp>;

            hold-trigger-key-positions = <LEFT_KEYS THUMBS>;
            hold-trigger-on-release;
        };
    };
};


/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |
            // |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |
            // |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
            //             | ESC | SPC | TAB |   | ENT | BCK  | DEL |
            bindings = <
&kp Q         &kp W        &kp E          &kp R          &kp T    &kp Y             &kp U              &kp I         &kp O        &kp P
&hml LGUI A   &hml LALT S  &hml LCTRL D   &hml LSHIFT F  &kp G    &kp H             &hmr RSHIFT J      &hmr RCTRL K  &hmr RALT L  &hmr RGUI LS(COMMA)
&kp Z         &kp X        &kp C          &kp V          &kp B    &kp N             &kp M              &kp COMMA     &kp DOT      &kp LS(NUMBER_7)
                           &kp ESCAPE     &lt NUM SPACE  &kp TAB  &lt NAV KP_ENTER  &lt SYM BACKSPACE  &kp DEL
            >;
        };

        sym_layer {
            // |  }  |  &  |  *  |  |  |  "  |   |  '  |  _   |  =  |  »  |  º  |
            // |  )  |  !  |  @  |  #  |  +  |   |  -  |  ~   |  `  |  /  |  ç  |
            // |  ]  |  $  |  %  |  ^  |     |   |     |      |  \  |     |  ª  |
            //             |  {  |  [  |  (  |   |     |  ON  |     |
            bindings = <
&kp RA(NUMBER_0)  &kp LS(NUMBER_6)  &kp LEFT_BRACE    &kp TILDE         &kp AT_SIGN       &kp MINUS  &kp LS(SLASH)               &kp LS(NUMBER_0)                &kp EQUAL                     &kp SQT
&kp LS(NUMBER_9)  &kp LS(NUMBER_1)  &kp RA(NUMBER_2)  &kp HASH          &kp LEFT_BRACKET  &kp SLASH  &hmr RIGHT_SHIFT BACKSLASH  &hmr RIGHT_CONTROL RIGHT_BRACE  &hmr RIGHT_ALT RIGHT_BRACKET  &hmr RIGHT_WIN SEMICOLON
&kp RA(NUMBER_9)  &kp LS(NUMBER_4)  &kp LS(NUMBER_5)  &kp PIPE          &none             &none      &none                       &kp GRAVE                       &kp LS(EQUAL)                 &kp DOUBLE_QUOTES
                                    &kp RA(NUMBER_7)  &kp RA(NUMBER_8)  &kp ASTERISK      &none      &none                       &none
            >;
        };

        num_layer {
            // |     |  7  |  8  |  9  |     |   | F12 |  F9  |  F8  |  F7  |     |
            // |  0  |  1  |  2  |  3  |     |   | F11 |  F3  |  F2  |  F1  |     |
            // |     |  4  |  5  |  6  |     |   | F10 |  F6  |  F5  |  F4  |     |
            //             |     | ON  |     |   |     |      |      |
            bindings = <
&none                   &kp NUMBER_7            &kp NUMBER_8         &kp NUMBER_9              &none  &kp F12  &kp F9               &kp F8                 &kp F7        &none
&hml LEFT_WIN NUMBER_0  &hml LEFT_ALT NUMBER_1  &hml LCTRL NUMBER_2  &hml LEFT_SHIFT NUMBER_3  &none  &kp F11  &hmr RIGHT_SHIFT F3  &hmr RIGHT_CONTROL F2  &hmr RALT F1  &kp RIGHT_GUI
&none                   &kp NUMBER_4            &kp NUMBER_5         &kp NUMBER_6              &none  &kp F10  &kp F6               &kp F5                 &kp F4        &none
                                                &none                &none                     &none  &none    &none                &none
            >;
        };

        nav_layer {
            // | OUT_BLE | BLE_SEL_0 | BLE_SEL_1 | BLE_SEL_2 | BLE_SEL_3 |   |            |           |            |             |             |
            // |   WIN   |    ALT    |    CTRL   |   SHIFT   |           |   | LEFT_ARROW | UP_ARROW  | DOWN_ARROW | RIGHT_ARROW |      :      |
            // | OUT_USB | BLE_CLR_0 | BLE_CLR_1 | BLE_CLR_2 | BLE_CLR_3 |   |            |           |      <     |      >      |      ?      |
            //                       |           |           |           |   |     ON     |           |            |
            bindings = <
&out OUT_BLE  &bt BT_SEL 0      &bt BT_SEL 1      &bt BT_SEL 2      &bt BT_SEL 3      &none           &none           &none                 &none                     &none
&kp LEFT_WIN  &kp LEFT_ALT      &kp LCTRL         &kp LEFT_SHIFT    &none             &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW          &kp RIGHT_ARROW           &kp LS(PERIOD)
&out OUT_USB  &bt BT_CLR_CMD 0  &bt BT_CLR_CMD 1  &bt BT_CLR_CMD 2  &bt BT_CLR_CMD 3  &none           &none           &kp NON_US_BACKSLASH  &kp LS(NON_US_BACKSLASH)  &kp LS(MINUS)
                                &none             &none             &none             &none           &none           &none
            >;
        };
    };
};

